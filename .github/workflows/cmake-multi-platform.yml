name: CMake on multiple platforms

on:
  push:
    branches: [ "AutoBuild-Test" ]
  pull_request:
    branches: [ "AutoBuild-Test" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-arch
            container: archlinux:latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: gcc
          - os: ubuntu-arch
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
        if [ "${{ matrix.os }}" == "ubuntu-arch" ]; then
          docker run --rm --name archlinux -v ${{ github.workspace }}:/workspace -w /workspace archlinux:latest \
          cmake --build /workspace/build --config Release
        else
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
        fi
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Create a zip file of the build directory
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          zip -r ${{ steps.strings.outputs.build-output-dir }}.zip ${{ steps.strings.outputs.build-output-dir }}
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          powershell Compress-Archive -Path ${{ steps.strings.outputs.build-output-dir }} -DestinationPath ${{ steps.strings.outputs.build-output-dir }}.zip
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          zip -r ${{ steps.strings.outputs.build-output-dir }}.zip ${{ steps.strings.outputs.build-output-dir }}
        fi
    - name: Generate unique identifier
      run: echo "UNIQUE_ID=$(date +%Y%m%d%H%M%S%3N)-${RANDOM}" >> $GITHUB_ENV

    - name: Upload build artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.build_type }}-${{ github.job }}-${{ github.sha }}-${{ env.UNIQUE_ID }}
        path: ${{ steps.strings.outputs.build-output-dir }}.zip
