name: CMake on multiple platforms

on:
  push:
    branches: [ "AutoBuild-Test" ]
  pull_request:
    branches: [ "AutoBuild-Test" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, ubuntu-arch]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-arch
            container: archlinux:latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup Arch Linux container
      if: matrix.os == 'ubuntu-arch'
      run: |
        docker run --rm --name archlinux -v ${{ github.workspace }}:/workspace -w /workspace archlinux:latest bash -c "
        pacman -Syu --noconfirm && pacman -Sy --noconfirm cmake clang zip"

    - name: Configure CMake
      run: |
        if ($env:matrix_os -eq "ubuntu-arch") {
          docker run --rm --name archlinux -v ${{ github.workspace }}:/workspace -w /workspace archlinux:latest `
          cmake -B /workspace/build -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Release -S /workspace
        } else {
          cmake -B ${{ steps.strings.outputs.build-output-dir }} `
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -S ${{ github.workspace }}
        }

    - name: Build
      run: |
        if ($env:matrix_os -eq "ubuntu-arch") {
          docker run --rm --name archlinux -v ${{ github.workspace }}:/workspace -w /workspace archlinux:latest `
          cmake --build /workspace/build --config Release
        } else {
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
        }

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-arch" ]; then
          docker run --rm --name archlinux -v ${{ github.workspace }}:/workspace -w /workspace archlinux:latest \
          ctest --build-config Release
        else
          ctest --build-config ${{ matrix.build_type }}
        fi

    - name: Create a zip file of the build directory (Linux and Arch)
      if: runner.os == 'Linux'
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-arch" ]; then
          docker run --rm --name archlinux -v ${{ github.workspace }}:/workspace -w /workspace archlinux:latest \
          zip -r /workspace/build.zip /workspace/build
        else
          zip -r ${{ steps.strings.outputs.build-output-dir }}.zip ${{ steps.strings.outputs.build-output-dir }}
        fi

    - name: Create a zip file of the build directory (Windows)
      if: runner.os == 'Windows'
      run: |
        powershell Compress-Archive -Path ${{ steps.strings.outputs.build-output-dir }} -DestinationPath ${{ steps.strings.outputs.build-output-dir }}.zip

    - name: Create a zip file of the build directory (macOS)
      if: runner.os == 'macOS'
      run: |
        ditto -c -k --sequesterRsrc --keepParent ${{ steps.strings.outputs.build-output-dir }} ${{ steps.strings.outputs.build-output-dir }}.zip

    - name: Upload build artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          ${{ steps.strings.outputs.build-output-dir }}.zip
          ${{ github.workspace }}/build.zip
