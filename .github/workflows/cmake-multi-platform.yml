name: CMake on multiple platforms

on:
  push:
    branches: [ "AutoBuild-Test" ]
  pull_request:
    branches: [ "AutoBuild-Test" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        cpp_compiler: [g++, clang++, cl]
      include:
        - os: windows-latest
          c_compiler: cl
          cpp_compiler: cl
        - os: ubuntu-latest
          c_compiler: gcc
          cpp_compiler: g++
        - os: ubuntu-latest
          c_compiler: clang
          cpp_compiler: clang++
      exclude:
        - os: windows-latest
          c_compiler: gcc
          cpp_compiler: g++
        - os: windows-latest
          c_compiler: clang
          cpp_compiler: clang++
        - os: ubuntu-latest
          c_compiler: cl

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set reusable variables
      id: vars
      run: |
        echo "build_output_dir=${{ github.workspace }}/build" >> $GITHUB_ENV
        echo "::set-output name=build_output_dir::${{ github.workspace }}/build"

    - name: Configure CMake
      run: cmake -B ${{ steps.vars.outputs.build_output_dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.vars.outputs.build_output_dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.vars.outputs.build_output_dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Create a zip file of the build directory
      if: runner.os == 'Linux' || runner.os == 'Windows'
      run: |
        $zipCmd = if ($IsWindows) { "Compress-Archive" } else { "zip -r" }
        $outputFile = "${{ steps.vars.outputs.build_output_dir }}.zip"
        $inputDir = ${{ steps.vars.outputs.build_output_dir }}
        $zipCmd -Path $inputDir -DestinationPath $outputFile

    - name: Upload build artifact
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}-${{ matrix.build_type }}
        path: ${{ steps.vars.outputs.build_output_dir }}.zip
